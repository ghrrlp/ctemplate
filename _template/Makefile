# Generated by ChatGPT (minor edits)
# https://chatgpt.com/share/66eb3965-6208-8004-8749-f0ef48992c6a
default: debug unit_test  # .PHONY

# NOTE: abbreviating debug, test, and release to D, T, and R

# Replace with your binary name!!
TARGET_FILENAME = hello

# Compiler and flags (simplified, to reduce variables and verbosity)
CC = gcc -std=c11 -Wall -MMD
CFLAGS_D = -g -O0
CFLAGS_T = $(CFLAGS_DEBUG) -DTEST
CFLAGS_R = -O3 -DNDEBUG

# Source files
SRCS = $(wildcard src/*.c)

# Object files
OBJS_D = $(patsubst src/%.c, build/debug/%.o, $(SRCS))
OBJS_T = $(patsubst src/%.c, build/test/%.o, $(SRCS))
OBJS_R = $(patsubst src/%.c, build/release/%.o, $(SRCS))

# Dependency files (which is why we added the -MMD flag)
DEPS_D = $(OBJS_D:.o=.d)
DEPS_T = $(OBJS_T:.o=.d)
DEPS_R = $(OBJS_R:.o=.d)

# Targets
TARGET_D = target/debug/$(TARGET_FILENAME)
TARGET_T = target/test/$(TARGET_FILENAME)
TARGET_R = target/release/$(TARGET_FILENAME)

# Compile rules
build/debug/%.o: src/%.c
	$(CC) $(CFLAGS_D) -c -o $@ $<
build/test/%.o: src/%.c
	$(CC) $(CFLAGS_T) -c -o $@ $<
build/release/%.o: src/%.c
	$(CC) $(CFLAGS_R) -c -o $@ $<

# Linking rules
$(TARGET_D): $(OBJS_D)
	$(CC) $(CFLAGS_D) -o $@ $^
$(TARGET_T): $(OBJS_T)
	$(CC) $(CFLAGS_T) -o $@ $^
$(TARGET_R): $(OBJS_R)
	$(CC) $(CFLAGS_R) -o $@ $^

# Include dependency files
-include $(DEPS_D) $(DEPS_T) $(DEPS_R)

# Abstract targets
.PHONY: default clean clean_all debug unit_test release mkdir
clean:
	rm -rf build/
clean_all:
	rm -rf build/ target/
debug: mkdir $(TARGET_D)
unit_test: mkdir $(TARGET_T)
	./$(TARGET_T)
release: mkdir $(TARGET_R)
mkdir:
	mkdir -p {target,build}/{debug,test,release}
